volumes:
  nn_apartments_data:

networks:
  nn_apartments_network:

services:
  db:
    container_name: ${POSTGRES_HOST}
    image: postgres:alpine
    env_file: ../apartmentsNN/.env
    volumes:
      - nn_apartments_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [ 'CMD', 'pg_isready', '-U', '${POSTGRES_USER}', '-d', '${POSTGRES_DB}' ]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 5s
    restart: unless-stopped
    networks:
      nn_apartments_network:

  backend:
    container_name: apartments_backend
    image: apartments-backend
    build:
      context: ../apartmentsNN/
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
    env_file: ../apartmentsNN/.env
    environment:
      - POSTGRES_PORT=5432
    volumes:
      - ../apartmentsNN/:/apartmentsNN
    command:
      - bash
      - -c
      - |
        python manage.py migrate
        python manage.py collectstatic --no-input
        gunicorn backend.wsgi --bind 0.0.0.0:8000
    networks:
      nn_apartments_network:
    restart: unless-stopped

  scheduler:
    image: apartments-backend
    depends_on:
      - backend
    volumes_from:
      - backend
    command:
      - bash
      - -c
      - python ../apartmentsNN/jobs.py
    networks:
      nn_apartments_network:

  nginx:
#    image: nginx:stable-alpine
    build:
      context: ..
      dockerfile: deploy/Dockerfile
    env_file: ../apartmentsNN/.env
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ../apartmentsNN/django_static:/django_static
      - ./nginx:/etc/nginx/conf.d
      - ./logs:/var/log/nginx
#      - ../build:/build
    depends_on:
      - backend
    networks:
      nn_apartments_network:
